{"version":3,"sources":["webpack:///./src/views/collections/components/Loading.vue?91b7","webpack:///src/views/collections/components/Loading.vue","webpack:///./src/views/collections/components/Loading.vue?638f","webpack:///./src/views/collections/components/Loading.vue","webpack:///../../../src/components/VSkeletonLoader/VSkeletonLoader.ts"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","_l","n","key","staticRenderFns","component","VCol","VContainer","VRow","VSkeletonLoader","name","props","boilerplate","loading","tile","transition","type","types","default","computed","role","$attrs","classes","elevationClasses","isLoading","Boolean","rootTypes","actions","article","avatar","button","card","chip","heading","image","paragraph","sentences","table","text","methods","genBone","genBones","bone","generator","Array","length","genStructure","children","mapBones","genSkeleton","slot","on","enter","el","beforeLeave","bones","h","class","style","undefined"],"mappings":"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","file":"js/chunk-242296d8.f38e0a57.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('base-section',{staticClass:\"pt-0\",attrs:{\"id\":\"loading\"}},[_c('v-container',[_c('v-row',_vm._l((4),function(n){return _c('v-col',{key:n,attrs:{\"cols\":\"12\",\"md\":\"3\"}},[_c('v-skeleton-loader',{attrs:{\"type\":\"card\"}})],1)}),1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <base-section\n    id=\"loading\"\n    class=\"pt-0\"\n  >\n    <v-container>\n      <v-row>\n        <v-col\n          v-for=\"n in 4\"\n          :key=\"n\"\n          cols=\"12\"\n          md=\"3\"\n        >\n          <v-skeleton-loader type=\"card\" />\n        </v-col>\n      </v-row>\n    </v-container>\n  </base-section>\n</template>\n\n<script>\n  export default {\n    name: 'CollectionsLoading',\n  }\n</script>\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Loading.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Loading.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Loading.vue?vue&type=template&id=05084c18&\"\nimport script from \"./Loading.vue?vue&type=script&lang=js&\"\nexport * from \"./Loading.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VRow } from 'vuetify/lib/components/VGrid';\nimport { VSkeletonLoader } from 'vuetify/lib/components/VSkeletonLoader';\ninstallComponents(component, {VCol,VContainer,VRow,VSkeletonLoader})\n","// Styles\nimport './VSkeletonLoader.sass'\n\n// Mixins\nimport Elevatable from '../../mixins/elevatable'\nimport Measurable from '../../mixins/measurable'\nimport Themeable from '../../mixins/themeable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\nimport { getSlot } from '../../util/helpers'\n\n/* @vue/component */\nexport default mixins(\n  Elevatable,\n  Measurable,\n  Themeable,\n).extend({\n  name: 'VSkeletonLoader',\n\n  props: {\n    boilerplate: Boolean,\n    loading: Boolean,\n    tile: Boolean,\n    transition: String,\n    type: String,\n    types: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n\n  computed: {\n    attrs (): object {\n      if (!this.isLoading) return this.$attrs\n\n      return !this.boilerplate ? {\n        'aria-busy': true,\n        'aria-live': 'polite',\n        role: 'alert',\n        ...this.$attrs,\n      } : {}\n    },\n    classes (): object {\n      return {\n        'v-skeleton-loader--boilerplate': this.boilerplate,\n        'v-skeleton-loader--is-loading': this.isLoading,\n        'v-skeleton-loader--tile': this.tile,\n        ...this.themeClasses,\n        ...this.elevationClasses,\n      }\n    },\n    isLoading (): boolean {\n      return Boolean(\n        !getSlot(this) ||\n        this.loading\n      )\n    },\n    rootTypes (): Record<string, string> {\n      return {\n        actions: 'button@2',\n        article: 'heading, paragraph',\n        avatar: 'avatar',\n        button: 'button',\n        card: 'image, card-heading',\n        'card-avatar': 'image, list-item-avatar',\n        'card-heading': 'heading',\n        chip: 'chip',\n        'date-picker': 'list-item, card-heading, divider, date-picker-options, date-picker-days, actions',\n        'date-picker-options': 'text, avatar@2',\n        'date-picker-days': 'avatar@28',\n        heading: 'heading',\n        image: 'image',\n        'list-item': 'text',\n        'list-item-avatar': 'avatar, text',\n        'list-item-two-line': 'sentences',\n        'list-item-avatar-two-line': 'avatar, sentences',\n        'list-item-three-line': 'paragraph',\n        'list-item-avatar-three-line': 'avatar, paragraph',\n        paragraph: 'text@3',\n        sentences: 'text@2',\n        table: 'table-heading, table-thead, table-tbody, table-tfoot',\n        'table-heading': 'heading, text',\n        'table-thead': 'heading@6',\n        'table-tbody': 'table-row-divider@6',\n        'table-row-divider': 'table-row, divider',\n        'table-row': 'table-cell@6',\n        'table-cell': 'text',\n        'table-tfoot': 'text@2, avatar@2',\n        text: 'text',\n        ...this.types,\n      }\n    },\n  },\n\n  methods: {\n    genBone (text: string, children: VNode[]) {\n      return this.$createElement('div', {\n        staticClass: `v-skeleton-loader__${text} v-skeleton-loader__bone`,\n      }, children)\n    },\n    genBones (bone: string): VNode[] {\n      // e.g. 'text@3'\n      const [type, length] = bone.split('@') as [string, number]\n      const generator = () => this.genStructure(type)\n\n      // Generate a length array based upon\n      // value after @ in the bone string\n      return Array.from({ length }).map(generator)\n    },\n    // Fix type when this is merged\n    // https://github.com/microsoft/TypeScript/pull/33050\n    genStructure (type?: string): any {\n      let children = []\n      type = type || this.type || ''\n      const bone = this.rootTypes[type] || ''\n\n      // End of recursion, do nothing\n      /* eslint-disable-next-line no-empty, brace-style */\n      if (type === bone) {}\n      // Array of values - e.g. 'heading, paragraph, text@2'\n      else if (type.indexOf(',') > -1) return this.mapBones(type)\n      // Array of values - e.g. 'paragraph@4'\n      else if (type.indexOf('@') > -1) return this.genBones(type)\n      // Array of values - e.g. 'card@2'\n      else if (bone.indexOf(',') > -1) children = this.mapBones(bone)\n      // Array of values - e.g. 'list-item@2'\n      else if (bone.indexOf('@') > -1) children = this.genBones(bone)\n      // Single value - e.g. 'card-heading'\n      else if (bone) children.push(this.genStructure(bone))\n\n      return [this.genBone(type, children)]\n    },\n    genSkeleton () {\n      const children = []\n      const slot = getSlot(this)\n\n      if (!this.isLoading) children.push(slot)\n      else children.push(this.genStructure())\n\n      /* istanbul ignore else */\n      if (!this.transition) return children\n\n      /* istanbul ignore next */\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n        },\n        // Only show transition when\n        // content has been loaded\n        on: {\n          enter: (el: HTMLElement) => {\n            if (this.isLoading) el.style.transition = 'none'\n          },\n          beforeLeave: (el: HTMLElement) => {\n            el.style.display = 'none'\n          },\n        },\n      }, children)\n    },\n    mapBones (bones: string) {\n      // Remove spaces and return array of structures\n      return bones.replace(/\\s/g, '').split(',').map(this.genStructure)\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-skeleton-loader',\n      attrs: this.attrs,\n      on: this.$listeners,\n      class: this.classes,\n      style: this.isLoading ? this.measurableStyles : undefined,\n    }, [this.genSkeleton()])\n  },\n})\n"],"sourceRoot":""}